services:
  api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    volumes:
      - ./:/app
    ports:
      - "${GREENLIGHT_PORT}:${GREENLIGHT_PORT}"
    command:
      [
        "--",
        "-port=${GREENLIGHT_PORT}",
        "-env=${GREENLIGHT_ENV}",
        "-db-database=${GREENLIGHT_DB_DATABASE}",
        "-db-password=${GREENLIGHT_DB_PASSWORD}",
        "-db-username=${GREENLIGHT_DB_USERNAME}",
        "-db-port=${GREENLIGHT_DB_PORT}",
        "-db-host=${GREENLIGHT_DB_HOST}",
        "-db-schema=${GREENLIGHT_DB_SCHEMA}",
        "-smtp-host=${GREENLIGHT_SMTP_HOST}",
        "-smtp-username=${GREENLIGHT_SMTP_USERNAME}",
        "-smtp-password=${GREENLIGHT_SMTP_PASSWORD}",
        "-smtp-sender=${GREENLIGHT_SMTP_SENDER}",
      ]
    depends_on:
      - db
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:${GREENLIGHT_PORT}/v1/healthcheck",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:latest
    environment:
      POSTGRES_DB: ${GREENLIGHT_DB_DATABASE}
      POSTGRES_USER: ${GREENLIGHT_DB_USERNAME}
      POSTGRES_PASSWORD: ${GREENLIGHT_DB_PASSWORD}
    expose:
      - 5432
    volumes:
      - psql_volume:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${GREENLIGHT_DB_USERNAME} -d ${GREENLIGHT_DB_DATABASE}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5

  migrate:
    image: migrate/migrate
    volumes:
      - ./migrations:/migrations
    command:
      [
        "-path",
        "/migrations",
        "-database",
        "postgres://${GREENLIGHT_DB_USERNAME}:${GREENLIGHT_DB_PASSWORD}@${GREENLIGHT_DB_HOST}:${GREENLIGHT_DB_PORT}/${GREENLIGHT_DB_DATABASE}?sslmode=disable&search_path=${GREENLIGHT_DB_SCHEMA}",
        "up",
      ]
    depends_on:
      db:
        condition: service_healthy

volumes:
  psql_volume:
